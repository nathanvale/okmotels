version: 2.1
orbs:
  aws-cli: circleci/aws-cli@0.1.13
executors:
  node:
    docker:
      - image: circleci/node:12.4.0
  cypress:
    docker:
      - image: cypress/base:10
jobs:
  Install:
    executor: cypress
    steps:
    - checkout
    - restore_cache:
        keys:
        - cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
    - run:
        name: Yarn install
        command: yarn install --frozen-lockfile && yarn validate
    - run:
        command: npx cypress verify
    - run:
        name: "Install missing library on awscli"
        command: apt-get install -y libpython-dev      
    - save_cache:
        key: cache-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
        paths:
        - ~/.cache
    - persist_to_workspace:
        root: ~/
        paths:
        - project
        - .cache/Cypress
        - public

  
  AWS:
    executor: node
    steps:
    - aws-cli/install
    - aws-cli/configure:
        aws-access-key-id: AWS_ACCESS_KEY_ID
        aws-secret-access-key: AWS_SECRET_ACCESS_KEY
        aws-region: AWS_DEFAULT_REGION
    - run: sudo npm install -g @aws-amplify/cli
    - run: amplify env list    
    - run: chmod 777 .circleci/headless_configure_project.sh && .circleci/headless_configure_project.sh       # like @ambientlight mention in #1236 
    - run: amplify env checkout dev
    - run: amplify env pull --yes
    - run: amplify publish --invalidateCloudFront --yes      

  Run E2E Tests:
    docker:
    - image: cypress/base:10
    parallelism: 4
    steps:
    - run:
        command: echo "Assuming dependencies were installed using cypress/install
          job"
    - attach_workspace:
        at: ~/
    - run:
        name: Start
        command: yarn serve
        background: true
    - run:
        name: Wait-on http://localhost:9000
        command: npx wait-on http://localhost:9000
    - run:
        name: Run Cypress tests
        command: "npx cypress run \\\n   \\\n   \\\n  "
  Deploy To Staging:
    docker:
    - image: cibuilds/aws:latest
    working_directory: ~/
    steps:
    - attach_workspace:
        at: ~/
    - deploy:
        name: Deploy to S3 if tests pass and branch is Master
        command: |
          aws s3 cp public/ s3://nathanvale.dev --recursive && aws cloudfront create-invalidation --distribution-id E1MF21UE0533BK --paths /*
workflows:
  version: 2
  build:
    jobs:
    - Install
    - AWS
    - Run E2E Tests:
        requires:
        - Install
    - Deploy To Staging:
        filters:
          branches:
            only: master
        requires:
        - Install
        - Run E2E Tests
